name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ '*' ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get commit and tag
        id: vars
        run: |
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "tag=$(git describe --tags --always)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (with log)
        run: |
          docker buildx build \
            --file ./Dockerfile \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/ssl-checker:latest \
            --push \
            --build-arg SOURCE_COMMIT=${{ steps.vars.outputs.commit }} \
            --build-arg SOURCE_TAG=${{ steps.vars.outputs.tag }} \
            . | tee build.log

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST_BRAZIL }}
          port: 6222
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            cd /home/ivanezko/brazil && ./deploy.sh brazil/ssl-checker.yml | tee deploy.log

      - name: Notify Telegram
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TG_CHAT_ID }}"'",
              "parse_mode": "Markdown",
              "text": "‚úÖ –î–µ–ø–ª–æ–π!\n- `${{ secrets.DOCKERHUB_USERNAME }}/ssl-checker:latest`\n\nüßë –ö–æ–º–º–∏—Ç: `${{ steps.vars.outputs.commit }}`\nüè∑Ô∏è –¢–µ–≥: `${{ steps.vars.outputs.tag }}`",
              "reply_markup": {
                "inline_keyboard": [[
                  {
                    "text": "üîç –û—Ç–∫—Ä—ã—Ç—å GitHub Actions",
                    "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"
                  }
                ]]
              }
            }'

      - name: Notify Telegram on failure
        if: failure()
        run: |
          LOG_BUILD=$(tail -n 30 build.log | sed 's/$/%0A/' | tr -d '\n')
          LOG_DEPLOY=$(tail -n 30 deploy.log | sed 's/$/%0A/' | tr -d '\n')
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "'"${{ secrets.TG_CHAT_ID }}"'",
              "parse_mode": "Markdown",
              "text": "‚ùå *–û—à–∏–±–∫–∞ –≤ GitHub Actions Workflow!*\n\nüßë –ê–≤—Ç–æ—Ä: ${{ github.actor }}\nüìù Commit: `${{ github.sha }}`\n Build log:${LOG_BUILD}\n Deploy log:${LOG_DEPLOY}",
              "reply_markup": {
                "inline_keyboard": [[
                  {
                    "text": "üìÑ –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥",
                    "url": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"
                  }
                ]]
              }
            }'

